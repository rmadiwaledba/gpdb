--
-- BOOLEAN
--
create table gpd1 (c1 char(1), c2 numeric, c3 numeric) distributed by (c1);
insert into gpd1 values ('a', 1, 1);
insert into gpd1 values ('a', 1, 2);
insert into gpd1 values ('b', 2, 1);
insert into gpd1 values ('b', 1, 2);
insert into gpd1 values ('c', 3, 2);
insert into gpd1 values ('c', 2, 3);
insert into gpd1 values ('d', 4, 4);
insert into gpd1 values ('d', 4, 3);
--
-- ignore
--
select c1 from gpd1;
 c1 
----
 a
 a
 c
 c
 b
 b
 d
 d
(8 rows)

--
-- order 1, 2
--
select c1, c1, c2, c3 from gpd1 order by 1,2;
 c1 | c1 | c2 | c3 
----+----+----+----
 a  | a  |  1 |  1
 a  | a  |  1 |  2
 b  | b  |  2 |  1
 b  | b  |  1 |  2
 c  | c  |  3 |  2
 c  | c  |  2 |  3
 d  | d  |  4 |  4
 d  | d  |  4 |  3
(8 rows)

--
--
select c1, c1, c2, c3 from gpd1 order by 1,2,3,4; -- order 1, 2     , 3    , 4
 c1 | c1 | c2 | c3 
----+----+----+----
 a  | a  |  1 |  1
 a  | a  |  1 |  2
 b  | b  |  1 |  2
 b  | b  |  2 |  1
 c  | c  |  2 |  3
 c  | c  |  3 |  2
 d  | d  |  4 |  3
 d  | d  |  4 |  4
(8 rows)

--
-- ignore
-- order 1, 2
--
select c1, c1, c2, c3 from gpd1 order by 1,2;
 c1 | c1 | c2 | c3 
----+----+----+----
 a  | a  |  1 |  1
 a  | a  |  1 |  2
 b  | b  |  2 |  1
 b  | b  |  1 |  2
 c  | c  |  3 |  2
 c  | c  |  2 |  3
 d  | d  |  4 |  4
 d  | d  |  4 |  3
(8 rows)

--
--  mvd 2,3->1 ; 2,3->4,5
-- order 4
--
select c1, c2, c3, c1, c1, c2 from gpd1 order by 4;
 c1 | c2 | c3 | c1 | c1 | c2 
----+----+----+----+----+----
 a  |  1 |  1 | a  | a  |  1
 a  |  1 |  2 | a  | a  |  1
 b  |  2 |  1 | b  | b  |  2
 b  |  1 |  2 | b  | b  |  1
 c  |  3 |  2 | c  | c  |  3
 c  |  2 |  3 | c  | c  |  2
 d  |  4 |  4 | d  | d  |  4
 d  |  4 |  3 | d  | d  |  4
(8 rows)

--  Brian: the contents of column 1 are not determined by any other 
--  column -- the column "specifies itself"
--
--  mvd 1->1
--
select row_number() over (), c1, c2, c3 from gpd1;
 row_number | c1 | c2 | c3 
------------+----+----+----
          1 | b  |  2 |  1
          2 | b  |  1 |  2
          3 | d  |  4 |  4
          4 | d  |  4 |  3
          5 | a  |  1 |  1
          6 | a  |  1 |  2
          7 | c  |  3 |  2
          8 | c  |  2 |  3
(8 rows)

-- Brian: 1 specifies 2
--  
--
    select -- mvd 1 -> 2
        x,
        row_number() over (partition by x) as y,
        z 
    from (values (1,'A'),(1,'B'),(2,'C'),(2,'D')) r(x,z);
 x | y | z 
---+---+---
 1 | 1 | A
 1 | 2 | B
 2 | 1 | C
 2 | 2 | D
(4 rows)

-- start_ignore
--
-- whatever is here is ignored until we reach end_ignore
--
-- end_ignore
--
-- explain testing
--
set gp_segments_for_planner=4;
set optimizer_segments=4;
set gp_cost_hashjoin_chainwalk=on;
set optimizer_nestloop_factor = 1.0;
explain analyze select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice4; segments: 2)  (cost=2.18..3.66 rows=4 width=16)
   Rows out:  16 rows at destination with 16 ms to end, start offset by 13 ms.
   ->  Nested Loop  (cost=2.18..3.66 rows=2 width=16)
         Rows out:  Avg 8.0 rows x 2 workers.  Max 8 rows (seg0) with 15 ms to end, start offset by 14 ms.
         ->  Broadcast Motion 2:2  (slice3; segments: 2)  (cost=1.17..2.39 rows=7 width=0)
               Rows out:  Avg 2.0 rows x 2 workers at destination.  Max 2 rows (seg0) with 14 ms to end, start offset by 14 ms.
               ->  Hash Semi Join  (cost=1.17..2.22 rows=2 width=0)
                     Hash Cond: b.c1 = "IN_subquery".max
                     Rows out:  2 rows (seg1) with 9.727 ms to first row, 11 ms to end, start offset by 18 ms.
                     Executor memory:  1K bytes.
                     Work_mem used:  1K bytes. Workfile: (0 spilling, 0 reused)
                     (seg1)   Hash chain length 1.0 avg, 1 max, using 1 of 262151 buckets.
                     ->  Seq Scan on gpd1 b  (cost=0.00..1.01 rows=1 width=2)
                           Rows out:  4 rows (seg1) with 2.920 ms to first row, 2.929 ms to end, start offset by 24 ms.
                     ->  Hash  (cost=1.16..1.16 rows=1 width=32)
                           Rows in:  1 rows (seg1) with 1.279 ms to end, start offset by 23 ms.
                           ->  Redistribute Motion 1:2  (slice2; segments: 1)  (cost=1.09..1.16 rows=1 width=32)
                                 Hash Key: "IN_subquery".max
                                 Rows out:  1 rows at destination (seg1) with 1.260 ms to first row, 1.261 ms to end, start offset by 23 ms.
                                 ->  Aggregate  (cost=1.09..1.10 rows=1 width=32)
                                       Rows out:  1 rows with 0.090 ms to end, start offset by 24 ms.
                                       Executor memory:  8K bytes.
                                       ->  Gather Motion 2:1  (slice1; segments: 2)  (cost=1.01..1.07 rows=1 width=32)
                                             Rows out:  2 rows at destination with 0.019 ms to first row, 0.024 ms to end, start offset by 24 ms.
                                             ->  Aggregate  (cost=1.01..1.02 rows=1 width=32)
                                                   Rows out:  Avg 1.0 rows x 2 workers.  Max 1 rows (seg0) with 3.996 ms to first row, 3.997 ms to end, start offset by 17 ms.
                                                   Executor memory:  8K bytes avg, 8K bytes max (seg0).
                                                   ->  Seq Scan on gpd1  (cost=0.00..1.01 rows=1 width=2)
                                                         Rows out:  Avg 4.0 rows x 2 workers.  Max 4 rows (seg0) with 3.940 ms to first row, 3.947 ms to end, start offset by 17 ms.
         ->  Materialize  (cost=1.01..1.02 rows=1 width=16)
               Rows out:  Avg 8.0 rows x 2 workers.  Max 8 rows (seg0) with 0.293 ms to first row, 0.301 ms to end of 2 scans, start offset by 29 ms.
               ->  Seq Scan on gpd1 a  (cost=0.00..1.01 rows=1 width=16)
                     Rows out:  Avg 4.0 rows x 2 workers.  Max 4 rows (seg0) with 0.018 ms to first row, 0.023 ms to end, start offset by 29 ms.
 Slice statistics:
   (slice0)    Executor memory: 227K bytes.
   (slice1)    Executor memory: 235K bytes avg x 2 workers, 235K bytes max (seg0).
   (slice2)    Executor memory: 259K bytes (seg0).
   (slice3)    Executor memory: 3327K bytes avg x 2 workers, 3339K bytes max (seg1).  Work_mem: 1K bytes max.
   (slice4)    Executor memory: 227K bytes avg x 2 workers, 227K bytes max (seg0).
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  gp_cost_hashjoin_chainwalk=on; gp_segments_for_planner=4; optimizer=off; optimizer_segments=4
 Total runtime: 29.533 ms
(43 rows)

explain select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice4; segments: 2)  (cost=2.18..3.66 rows=4 width=16)
   ->  Nested Loop  (cost=2.18..3.66 rows=2 width=16)
         ->  Broadcast Motion 2:2  (slice3; segments: 2)  (cost=1.17..2.39 rows=7 width=0)
               ->  Hash Semi Join  (cost=1.17..2.22 rows=2 width=0)
                     Hash Cond: b.c1 = "IN_subquery".max
                     ->  Seq Scan on gpd1 b  (cost=0.00..1.01 rows=1 width=2)
                     ->  Hash  (cost=1.16..1.16 rows=1 width=32)
                           ->  Redistribute Motion 1:2  (slice2; segments: 1)  (cost=1.09..1.16 rows=1 width=32)
                                 Hash Key: "IN_subquery".max
                                 ->  Aggregate  (cost=1.09..1.10 rows=1 width=32)
                                       ->  Gather Motion 2:1  (slice1; segments: 2)  (cost=1.01..1.07 rows=1 width=32)
                                             ->  Aggregate  (cost=1.01..1.02 rows=1 width=32)
                                                   ->  Seq Scan on gpd1  (cost=0.00..1.01 rows=1 width=2)
         ->  Materialize  (cost=1.01..1.02 rows=1 width=16)
               ->  Seq Scan on gpd1 a  (cost=0.00..1.01 rows=1 width=16)
 Settings:  gp_cost_hashjoin_chainwalk=on; gp_segments_for_planner=4; optimizer=off; optimizer_segments=4
(16 rows)

select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
 c1 | c2 | c3 
----+----+----
 b  |  2 |  1
 b  |  1 |  2
 d  |  4 |  4
 d  |  4 |  3
 b  |  2 |  1
 b  |  1 |  2
 d  |  4 |  4
 d  |  4 |  3
 a  |  1 |  1
 a  |  1 |  2
 c  |  3 |  2
 c  |  2 |  3
 a  |  1 |  1
 a  |  1 |  2
 c  |  3 |  2
 c  |  2 |  3
(16 rows)

set gp_segments_for_planner=40;
set optimizer_segments=40;
set optimizer_nestloop_factor = 1.0;
explain select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice4; segments: 2)  (cost=2.90..7.97 rows=4 width=16)
   ->  Nested Loop  (cost=2.90..7.97 rows=2 width=16)
         ->  Broadcast Motion 2:2  (slice3; segments: 2)  (cost=1.89..4.30 rows=67 width=0)
               ->  Hash Semi Join  (cost=1.89..2.94 rows=2 width=0)
                     Hash Cond: b.c1 = "IN_subquery".max
                     ->  Seq Scan on gpd1 b  (cost=0.00..1.01 rows=1 width=2)
                     ->  Hash  (cost=1.88..1.88 rows=1 width=32)
                           ->  Redistribute Motion 1:2  (slice2; segments: 1)  (cost=1.45..1.88 rows=1 width=32)
                                 Hash Key: "IN_subquery".max
                                 ->  Aggregate  (cost=1.45..1.46 rows=1 width=32)
                                       ->  Gather Motion 2:1  (slice1; segments: 2)  (cost=1.01..1.44 rows=1 width=32)
                                             ->  Aggregate  (cost=1.01..1.02 rows=1 width=32)
                                                   ->  Seq Scan on gpd1  (cost=0.00..1.01 rows=1 width=2)
         ->  Materialize  (cost=1.01..1.02 rows=1 width=16)
               ->  Seq Scan on gpd1 a  (cost=0.00..1.01 rows=1 width=16)
 Settings:  gp_cost_hashjoin_chainwalk=on; gp_segments_for_planner=40; optimizer=off; optimizer_segments=40
(16 rows)

select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
 c1 | c2 | c3 
----+----+----
 a  |  1 |  1
 a  |  1 |  2
 c  |  3 |  2
 c  |  2 |  3
 a  |  1 |  1
 a  |  1 |  2
 c  |  3 |  2
 c  |  2 |  3
 b  |  2 |  1
 b  |  1 |  2
 d  |  4 |  4
 d  |  4 |  3
 b  |  2 |  1
 b  |  1 |  2
 d  |  4 |  4
 d  |  4 |  3
(16 rows)

explain analyze select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
                                                                                       QUERY PLAN                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice4; segments: 2)  (cost=2.90..7.97 rows=4 width=16)
   Rows out:  16 rows at destination with 13 ms to end, start offset by 0.647 ms.
   ->  Nested Loop  (cost=2.90..7.97 rows=2 width=16)
         Rows out:  Avg 8.0 rows x 2 workers.  Max 8 rows (seg0) with 12 ms to end, start offset by 1.342 ms.
         ->  Broadcast Motion 2:2  (slice3; segments: 2)  (cost=1.89..4.30 rows=67 width=0)
               Rows out:  Avg 2.0 rows x 2 workers at destination.  Max 2 rows (seg0) with 11 ms to end, start offset by 1.343 ms.
               ->  Hash Semi Join  (cost=1.89..2.94 rows=2 width=0)
                     Hash Cond: b.c1 = "IN_subquery".max
                     Rows out:  2 rows (seg1) with 5.473 ms to first row, 6.345 ms to end, start offset by 6.331 ms.
                     Executor memory:  1K bytes.
                     Work_mem used:  1K bytes. Workfile: (0 spilling, 0 reused)
                     (seg1)   Hash chain length 1.0 avg, 1 max, using 1 of 262151 buckets.
                     ->  Seq Scan on gpd1 b  (cost=0.00..1.01 rows=1 width=2)
                           Rows out:  4 rows (seg1) with 2.848 ms to first row, 2.858 ms to end, start offset by 8.944 ms.
                     ->  Hash  (cost=1.88..1.88 rows=1 width=32)
                           Rows in:  1 rows (seg1) with 2.253 ms to end, start offset by 6.690 ms.
                           ->  Redistribute Motion 1:2  (slice2; segments: 1)  (cost=1.45..1.88 rows=1 width=32)
                                 Hash Key: "IN_subquery".max
                                 Rows out:  1 rows at destination (seg1) with 2.244 ms to first row, 2.245 ms to end, start offset by 6.691 ms.
                                 ->  Aggregate  (cost=1.45..1.46 rows=1 width=32)
                                       Rows out:  1 rows with 4.056 ms to end, start offset by 4.734 ms.
                                       Executor memory:  8K bytes.
                                       ->  Gather Motion 2:1  (slice1; segments: 2)  (cost=1.01..1.44 rows=1 width=32)
                                             Rows out:  2 rows at destination with 2.024 ms to first row, 4.027 ms to end, start offset by 4.734 ms.
                                             ->  Aggregate  (cost=1.01..1.02 rows=1 width=32)
                                                   Rows out:  Avg 1.0 rows x 2 workers.  Max 1 rows (seg0) with 2.669 ms to end, start offset by 3.919 ms.
                                                   Executor memory:  8K bytes avg, 8K bytes max (seg0).
                                                   ->  Seq Scan on gpd1  (cost=0.00..1.01 rows=1 width=2)
                                                         Rows out:  Avg 4.0 rows x 2 workers.  Max 4 rows (seg0) with 2.632 ms to first row, 2.639 ms to end, start offset by 3.919 ms.
         ->  Materialize  (cost=1.01..1.02 rows=1 width=16)
               Rows out:  Avg 8.0 rows x 2 workers.  Max 8 rows (seg0) with 0.153 ms to first row, 0.161 ms to end of 2 scans, start offset by 13 ms.
               ->  Seq Scan on gpd1 a  (cost=0.00..1.01 rows=1 width=16)
                     Rows out:  Avg 4.0 rows x 2 workers.  Max 4 rows (seg0) with 0.018 ms to first row, 0.024 ms to end, start offset by 13 ms.
 Slice statistics:
   (slice0)    Executor memory: 227K bytes.
   (slice1)    Executor memory: 235K bytes avg x 2 workers, 235K bytes max (seg0).
   (slice2)    Executor memory: 259K bytes (seg0).
   (slice3)    Executor memory: 3327K bytes avg x 2 workers, 3339K bytes max (seg1).  Work_mem: 1K bytes max.
   (slice4)    Executor memory: 227K bytes avg x 2 workers, 227K bytes max (seg0).
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  gp_cost_hashjoin_chainwalk=on; gp_segments_for_planner=40; optimizer=off; optimizer_segments=40
 Total runtime: 13.674 ms
(43 rows)

-- start_equiv
--
-- order 1
select c1 from gpd1 order by 1;
 c1 
----
 a
 a
 b
 b
 c
 c
 d
 d
(8 rows)

--
--
select c1 from gpd1 ;
 c1 
----
 a
 a
 c
 c
 b
 b
 d
 d
(8 rows)

--
--end_equiv
--
--
--
-- Clean up
--
DROP TABLE  gpd1;
-- start_matchsubs
--
-- # create a match/subs expression to handle a value which always changes
--
-- # use zero-width negative look-behind assertion to match "gpmatchsubs1"
-- # that does not follow substring
--
-- m/(?<!substring..)gpmatchsubs1/
-- s/gpmatchsubs1.*/happy sub1/
--
-- m/(?<!substring..)gpmatchsubs2/
-- s/gpmatchsubs2.*/happy sub2/
--
-- end_matchsubs
-- substitute constant values for results
-- use substring because length of time string varies which changes output
select substring('gpmatchsubs1' || now(), 1,  25);
         substring         
---------------------------
 gpmatchsubs1Mon Jul 21 14
(1 row)

select substring('gpmatchsubs2' || now(), 1,  25);
         substring         
---------------------------
 gpmatchsubs2Mon Jul 21 14
(1 row)

-- start_matchignore
--
-- # create a match expression to handle a value which always changes
--
-- m/(?<!substring..)gpmatchignore1/
-- m/(?<!substring..)gpmatchignore2/
--
-- end_matchignore
-- just ignore the results
select substring('gpmatchignore1' || now(), 1,  25);
         substring         
---------------------------
 gpmatchignore1Mon Jul 21 
(1 row)

select substring('gpmatchignore2' || now(), 1,  25);
         substring         
---------------------------
 gpmatchignore2Mon Jul 21 
(1 row)

reset optimizer_nestloop_factor;
-- 
